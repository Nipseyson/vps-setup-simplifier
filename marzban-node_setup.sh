#!/bin/bash

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
if [[ $EUID -ne 0 ]]; then
  echo "‚ùå –°–∫—Ä–∏–ø—Ç –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Ç root" >&2
  exit 1
fi

echo "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∏ —Ñ–∞–µ—Ä–≤–æ–ª–∞"

# 1. –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
read -p "‚û°Ô∏è  –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è SSH: " ssh_port
read -p "‚û°Ô∏è  –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è marzban-node: " marz_port
read -p "‚û°Ô∏è  –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è xray API: " api_port
read -p "‚û°Ô∏è  –í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω: " main_domain
read -p "‚û°Ô∏è  –í–≤–µ–¥–∏—Ç–µ —Å—É–±-–¥–æ–º–µ–Ω –ø–∞–Ω–µ–ª–∏: " panel_domain
read -p "‚û°Ô∏è  –í–≤–µ–¥–∏—Ç–µ —Å—É–±-–¥–æ–º–µ–Ω –ø–æ–¥–ø–∏—Å–æ–∫: " sub_domain
read -p "‚û°Ô∏è  –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏: " xray_reality_domain
read -p "‚û°Ô∏è  –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π SSH-–∫–ª—é—á (–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π): " ssh_key
read -p "‚û°Ô∏è  –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –¥–ª—è SSH –∏ VPN –ø–∞–Ω–µ–ª–∏: " allowed_ips_raw

# –ü–∞—Ä—Å–∏–º IP
IFS=',' read -ra allowed_ips <<< "$allowed_ips_raw"

# 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UFW
echo "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–µ—Ä–≤–æ–ª–∞ (UFW)..."

ufw --force reset
ufw default deny incoming
ufw default allow outgoing

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ IP
for ip in "${allowed_ips[@]}"; do
  ufw allow from "$ip" to any port "$ssh_port" proto tcp
  ufw allow from "$ip" to any port "$marz_port" proto tcp
  ufw allow from "$ip" to any port "$api_port" proto tcp
done

# –û—Ç–∫—Ä—ã–≤–∞–µ–º 80 –∏ 443 –¥–ª—è –≤—Å–µ—Ö
ufw allow 80/tcp
ufw allow 443/tcp

ufw --force enable
echo "‚úÖ UFW –≤–∫–ª—é—á—ë–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

# 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH-–∫–ª—é—á–∞
echo "üîê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SSH-–∫–ª—é—á–∞ –≤ /root/.ssh..."

mkdir -p /root/.ssh
chmod 700 /root/.ssh
echo "$ssh_key" > /root/.ssh/authorized_keys
chmod 600 /root/.ssh/authorized_keys
echo "‚úÖ –ö–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è root"

# 4. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º sshd
echo "üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ sshd_config..."

sshd_config="/etc/ssh/sshd_config"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä—Ç–∞
if grep -q "^#\?Port " "$sshd_config"; then
  sed -i "s/^#\?Port .*/Port $ssh_port/" "$sshd_config"
else
  echo "Port $ssh_port" >> "$sshd_config"
fi

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
if grep -q "^#\?PasswordAuthentication " "$sshd_config"; then
  sed -i 's/^#\?PasswordAuthentication .*/PasswordAuthentication no/' "$sshd_config"
else
  echo "PasswordAuthentication no" >> "$sshd_config"
fi

# PermitRootLogin (–ø—Ä–æ—Ç–∏–≤ "yes")
if grep -q "^#\?PermitRootLogin " "$sshd_config"; then
  sed -i 's/^#\?PermitRootLogin .*/PermitRootLogin prohibit-password/' "$sshd_config"
else
  echo "PermitRootLogin prohibit-password" >> "$sshd_config"
fi

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ssh
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ sshd..."
if systemctl list-units --type=service | grep -q sshd.service; then
  systemctl restart sshd
elif systemctl list-units --type=service | grep -q ssh.service; then
  systemctl restart ssh
else
  echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª—É–∂–±—É SSH (sshd/ssh), –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"
fi


# 5. –ö—Ä–æ–Ω-–∑–∞–¥–∞—á–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
echo "üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron-–∑–∞–¥–∞—á–∏ –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –≤ 05:00 —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–æ 10 –º–∏–Ω—É—Ç..."

escaped_cron_line='0 5 * * * sleep $((RANDOM \% 600)) && /sbin/reboot'

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ —Å reboot, –µ—Å–ª–∏ –±—ã–ª–∏, –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
(crontab -l 2>/dev/null | grep -v '/sbin/reboot'; echo "$escaped_cron_line") | crontab -

echo "‚úÖ Cron –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞"

# 6. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ IPv6 –ø–æ –∑–∞–ø—Ä–æ—Å—É
read -rp "‚ùì –û—Ç–∫–ª—é—á–∏—Ç—å IPv6? [y/N]: " disable_ipv6
disable_ipv6=${disable_ipv6,,} # –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

if [[ "$disable_ipv6" == "y" || "$disable_ipv6" == "yes" ]]; then
    echo "üö´ –û—Ç–∫–ª—é—á–∞–µ–º IPv6..."

    cat <<EOF > /etc/sysctl.d/99-disable-ipv6.conf
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
EOF

    sysctl --system > /dev/null
    echo "‚úÖ IPv6 –æ—Ç–∫–ª—é—á—ë–Ω"
else
    echo "‚ÑπÔ∏è IPv6 –æ—Å—Ç–∞–≤–ª–µ–Ω –≤–∫–ª—é—á—ë–Ω–Ω—ã–º"
fi

# 7. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ HAProxy

echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ HAProxy –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è marzban-node"

apt update
apt install -y haproxy
cat > /etc/haproxy/haproxy.cfg <<EOF
listen front
    mode tcp
    bind *:443

    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }
    use_backend reality if { req.ssl_sni -i end  ${xray_reality_domain} }
    use_backend sub if { req.ssl_sni -i end  ${sub_domain} }
    use_backend panel if { req.ssl_sni -i end  ${panel_domain} }
    use_backend blackhole
# –û–±—å—è–≤–ª—è–µ–º backend reality c –∞–¥—Ä–µ—Å–æ–º:–ø–æ—Ä—Ç–æ–º –ø—Ä–∏–Ω–∏–º–∞—é—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
backend reality
    mode tcp
    server srv_reality 127.0.0.1:12000 send-proxy-v2 tfo
# –û–±—å—è–≤–ª—è–µ–º backend sub c –∞–¥—Ä–µ—Å–æ–º:–ø–æ—Ä—Ç–æ–º –ø—Ä–∏–Ω–∏–º–∞—é—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
backend sub
    mode tcp
    server srv_sub 127.0.0.1:10000
# –û–±—å—è–≤–ª—è–µ–º backend panel c –∞–¥—Ä–µ—Å–æ–º:–ø–æ—Ä—Ç–æ–º –ø—Ä–∏–Ω–∏–º–∞—é—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
backend panel
    mode tcp
    server srv_panel 127.0.0.1:10000
backend blackhole
    mode tcp
    tcp-request content reject
EOF
systemctl restart haproxy
systemctl enable haproxy

# 8. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ marzban-node

echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ marzban-node"

apt upgrade -y
apt install socat -y && apt install curl socat -y && apt install git -y
git clone https://github.com/Gozargah/Marzban-node
cd Marzban-node
curl -fsSL https://get.docker.com | sh

cert_file="/var/lib/marzban-node/ssl_client_cert.pem"
echo "–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ PEM)."
echo "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥ —Å—Ç—Ä–æ–∫–æ–π 'EOF' –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ."

cert=""
while IFS= read -r line; do
  [[ "$line" == "EOF" ]] && break
  cert+="$line"$'\n'
done

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

mkdir -p "$(dirname "$cert_file")"

# –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª

echo -e "$cert" > "$cert_file"

echo "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ $cert_file"

if ! command -v docker &>/dev/null || ! command -v docker compose &>/dev/null; then
  echo "‚ùå Docker –∏–ª–∏ docker compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ PATH"
  exit 1
fi

cat > docker-compose.yml <<EOF
services:
  marzban-node:
    image: gozargah/marzban-node:latest
    restart: always
    network_mode: host

    volumes:
      - /var/lib/marzban-node:/var/lib/marzban-node

    environment:
      SSL_CLIENT_CERT_FILE: "/var/lib/marzban-node/ssl_client_cert.pem"
      SERVICE_PROTOCOL: rest
      SERVICE_PORT: ${marz_port}
      XRAY_API_PORT: ${api_port}
EOF

docker compose up -d

# –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
echo -e "\nüéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã."

echo -e "\n‚ö†Ô∏è –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ –Ω–æ–≤–æ–º—É –ø–æ—Ä—Ç—É –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–µ—Å—Å–∏–∏."
